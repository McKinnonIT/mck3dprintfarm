name: Build and Push Docker Image

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  # Allow manual triggering
  workflow_dispatch:

env:
  REGISTRY: docker.io
  IMAGE_NAME: mck3dprintfarm

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Validate secrets
      - name: Validate secrets
        run: |
          # Check if the Docker Hub username is set
          if [ -z "${{ secrets.DOCKERHUB_USERNAME }}" ]; then
            echo "::error::DOCKERHUB_USERNAME secret is not set. Please add it in GitHub repository settings."
            exit 1
          fi
          
          # Check if the Docker Hub token is set
          if [ -z "${{ secrets.DOCKERHUB_TOKEN }}" ]; then
            echo "::error::DOCKERHUB_TOKEN secret is not set. Please add it in GitHub repository settings."
            exit 1
          fi
          
          echo "Required secrets are configured"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Extract version from package.json
      - name: Extract version from package.json
        id: package-version
        run: |
          VERSION=$(grep '"version"' package.json | cut -d '"' -f 4)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version extracted: $VERSION"

      # Login to DockerHub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Build the Docker image without tags first
      - name: Build Docker image (without push)
        id: build
        uses: docker/build-push-action@v4
        with:
          context: .
          load: true
          push: false
          tags: local-image:latest

      # Build Docker image
      - name: Build Docker image
        id: docker_build
        uses: docker/build-push-action@v4
        with:
          context: .
          platforms: linux/amd64
          push: false
          load: true
          tags: local-image:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          # Enable detailed build output for debugging
          build-args: |
            BUILDKIT_INLINE_CACHE=1
          # Add more detailed output to debug build issues
          outputs: type=docker,dest=/tmp/docker-image.tar

      # Check if build succeeded
      - name: Check image
        run: |
          docker image ls
          if ! docker image inspect local-image:latest > /dev/null 2>&1; then
            echo "Docker image build failed!"
            exit 1
          fi
          echo "Docker image built successfully"

      # Tag and push the image
      - name: Tag and push images
        run: |
          # Check login status
          docker info
          
          # Use the locally built image and tag it
          DOCKER_USER="${{ secrets.DOCKERHUB_USERNAME }}"
          VERSION="${{ steps.package-version.outputs.version }}"
          
          # Debug output for troubleshooting (secrets will be masked)
          echo "Docker Hub username secret exists: ${{ secrets.DOCKERHUB_USERNAME != '' }}"
          
          # Check username
          if [ -z "$DOCKER_USER" ]; then
            echo "::error::Docker Hub username is not set or empty. Please add DOCKERHUB_USERNAME secret."
            exit 1
          fi
          
          # Additional check to ensure the username is not a placeholder
          if [[ "$DOCKER_USER" == "***" || "$DOCKER_USER" == "**" ]]; then
            echo "::error::Docker Hub username appears to be masked or invalid. Please check your DOCKERHUB_USERNAME secret."
            exit 1
          fi
          
          echo "Using Docker Hub username: $DOCKER_USER"
          echo "Using version: $VERSION"
          
          # Create full image name with namespace
          FULL_IMAGE_NAME="$DOCKER_USER/${{ env.IMAGE_NAME }}"
          echo "Full image name: $FULL_IMAGE_NAME"
          
          # Tag the local image with proper tags
          docker tag local-image:latest "$FULL_IMAGE_NAME:latest"
          docker tag local-image:latest "$FULL_IMAGE_NAME:$VERSION"
          
          # Push the tagged images
          docker push "$FULL_IMAGE_NAME:latest"
          docker push "$FULL_IMAGE_NAME:$VERSION"
          
          echo "Successfully pushed images to Docker Hub"

      # Update Docker Hub Description
      - name: Update Docker Hub Description
        uses: peter-evans/dockerhub-description@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          repository: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}
          short-description: "McKinnon Secondary College 3D Print Farm management application" 