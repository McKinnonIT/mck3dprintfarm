name: Build and Push Docker Image

on:
  # Run on push to main branches and manual trigger
  push:
    branches: [ main, master, v0.0.3a ]
  # Allow manual triggering
  workflow_dispatch:

env:
  REGISTRY: docker.io
  IMAGE_NAME: mck3dprintfarm

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Set up QEMU for cross-platform builds
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: 'arm64,amd64'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Extract version from package.json
      - name: Extract version from package.json
        id: package-version
        run: |
          VERSION=$(grep '"version"' package.json | cut -d '"' -f 4)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version extracted: $VERSION"

      # Set up .npmrc with the same settings as local
      - name: Create .npmrc file
        run: |
          echo "legacy-peer-deps=true" > .npmrc
          echo "node-linker=hoisted" >> .npmrc
          echo "fetch-retries=5" >> .npmrc
          echo "fetch-retry-mintimeout=20000" >> .npmrc
          echo "fetch-retry-maxtimeout=120000" >> .npmrc
          echo "network-timeout=300000" >> .npmrc
          echo "save-exact=true" >> .npmrc
          cat .npmrc

      # Login to DockerHub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Test build with the same parameters as local
      - name: Test build Docker image locally
        uses: docker/build-push-action@v4
        with:
          context: .
          load: true
          platforms: linux/amd64
          tags: mck3dprintfarm:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            NODE_ENV=production
            NEXTAUTH_URL=http://localhost:3000
            DATABASE_URL=file:/app/prisma/dev.db

      # Verify test build works
      - name: Verify test build
        run: |
          echo "Verifying the test Docker image..."
          docker image ls mck3dprintfarm:test
      
      # Get Docker username in correct format
      - name: Prepare Docker Hub username
        id: prep
        run: |
          DOCKER_USER="${{ secrets.DOCKERHUB_USERNAME }}"
          # Convert username to lowercase and remove special characters
          SANITIZED_USER=$(echo "$DOCKER_USER" | tr '[:upper:]' '[:lower:]' | tr -cd '[:alnum:]_.-')
          echo "sanitized_user=$SANITIZED_USER" >> $GITHUB_OUTPUT
          echo "Using Docker Hub username: $SANITIZED_USER"
          
          # Full image name
          FULL_IMAGE_NAME="$SANITIZED_USER/${{ env.IMAGE_NAME }}"
          echo "full_image_name=$FULL_IMAGE_NAME" >> $GITHUB_OUTPUT
          echo "Full image name: $FULL_IMAGE_NAME"

      # Build and push multi-platform images using exact same configuration as local test
      - name: Build and push Docker images
        uses: docker/build-push-action@v4
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ steps.prep.outputs.full_image_name }}:latest
            ${{ steps.prep.outputs.full_image_name }}:${{ steps.package-version.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            NODE_ENV=production
            NEXTAUTH_URL=http://localhost:3000
            DATABASE_URL=file:/app/prisma/dev.db

      # Final message about success
      - name: Display completion message
        run: |
          echo "Successfully built and pushed multi-architecture Docker images:"
          echo "AMD64: ${{ steps.prep.outputs.full_image_name }}:latest"
          echo "ARM64: ${{ steps.prep.outputs.full_image_name }}:latest"
          echo "AMD64: ${{ steps.prep.outputs.full_image_name }}:${{ steps.package-version.outputs.version }}"
          echo "ARM64: ${{ steps.prep.outputs.full_image_name }}:${{ steps.package-version.outputs.version }}"
          echo ""
          echo "Images can be pulled with: docker pull ${{ steps.prep.outputs.full_image_name }}:latest"

      # Update Docker Hub Description
      # - name: Update Docker Hub Description
      #   uses: peter-evans/dockerhub-description@v3
      #   with:
      #     username: ${{ secrets.DOCKERHUB_USERNAME }}
      #     password: ${{ secrets.DOCKERHUB_TOKEN }}
      #     repository: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}
      #     short-description: "McKinnon Secondary College 3D Print Farm management application" 